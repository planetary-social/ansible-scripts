---
- name: Set groups_relay dir
  ansible.builtin.set_fact:
    groups_relay_dir: "{{ homedir }}/services/groups_relay"

- name: Ensure services/groups_relay exists
  ansible.builtin.file:
    path: "{{ groups_relay_dir }}"
    state: directory
    mode: '0755'

- name: Copy docker-compose file
  ansible.builtin.template:
    src: docker-compose.yml.tpl
    dest: "{{ groups_relay_dir }}/docker-compose.yml"
    mode: '0644'

- name: Get Cloudflare IPv4 addresses
  ansible.builtin.uri:
    url: https://www.cloudflare.com/ips-v4
    return_content: yes
  register: cloudflare_ips_v4

- name: Get Cloudflare IPv6 addresses
  ansible.builtin.uri:
    url: https://www.cloudflare.com/ips-v6
    return_content: yes
  register: cloudflare_ips_v6

- name: UFW - Allow HTTP/HTTPS from Cloudflare IPs only
  become: true
  community.general.ufw:
    rule: allow
    from_ip: "{{ item.0 }}"
    port: "{{ item.1 }}"
    proto: tcp
  with_nested:
    - "{{ (cloudflare_ips_v4.content.split('\n') | reject('equalto', '') | list) + (cloudflare_ips_v6.content.split('\n') | reject('equalto', '') | list) }}"
    - ["80", "443"]

- name: UFW - Allow HTTP/HTTPS from anywhere (for non-proxied subdomains)
  become: true
  community.general.ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
  loop:
    - "80"
    - "443"
  when: not (all_domains_proxied_through_cloudflare | default(false))

- name: Ensure cert directory exist
  ansible.builtin.file:
    path: "{{ groups_relay_dir }}/certs"
    state: directory
    mode: '0755'

- name: Ensure config directory exist
  become: true
  ansible.builtin.file:
    path: "{{ groups_relay_dir }}/config"
    state: directory
    mode: '0755'
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"

- name: Copy settings file to config dir
  ansible.builtin.template:
    src: settings.yml.tpl
    dest: "{{ groups_relay_dir }}/config/settings.yml"
    mode: '0644'

- name: ensure docker is running
  ansible.builtin.service:
    name: docker
    state: started

- name: Start up docker services
  ansible.builtin.shell: "docker compose down && docker compose up -d"
  args:
    chdir: "{{ groups_relay_dir }}"
  register: service_started
  retries: 5
  until: service_started is success

- name: Setup the image updater
  ansible.builtin.include_role:
    name: image-update-service
  vars:
    service_name: groups_relay
    service_image: "{{ groups_relay_image }}"
    service_image_tag: "{{ groups_relay_image_tag }}"
    frequency: 3m
    working_dir: "{{ groups_relay_dir }}"

- name: Setup the health check
  ansible.builtin.include_role:
    name: health-check
  vars:
    health_endpoint: "{{ groups_relay_health_endpoint }}"
