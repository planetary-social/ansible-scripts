---
- name: Ensure service directory exists
  file:
    path: "{{ ansible_env.HOME }}/services/profile_aggregator"
    state: directory
    mode: '0755'

- name: Deploy docker-compose file
  template:
    src: docker-compose.yml.tpl
    dest: "{{ ansible_env.HOME }}/services/profile_aggregator/docker-compose.yml"
    mode: '0644'
  notify: restart profile_aggregator

- name: Get Cloudflare IPv4 addresses
  ansible.builtin.uri:
    url: https://www.cloudflare.com/ips-v4
    return_content: yes
  register: cloudflare_ips_v4

- name: Get Cloudflare IPv6 addresses
  ansible.builtin.uri:
    url: https://www.cloudflare.com/ips-v6
    return_content: yes
  register: cloudflare_ips_v6

- name: UFW - Allow HTTP/HTTPS from Cloudflare IPs only
  become: true
  community.general.ufw:
    rule: allow
    from_ip: "{{ item.0 }}"
    port: "{{ item.1 }}"
    proto: tcp
  with_nested:
    - "{{ (cloudflare_ips_v4.content.split('\n') | reject('equalto', '') | list) + (cloudflare_ips_v6.content.split('\n') | reject('equalto', '') | list) }}"
    - ["80", "443"]
  when: all_domains_proxied_through_cloudflare | default(false)

- name: UFW - Allow HTTP/HTTPS from anywhere (for non-proxied domains)
  become: true
  community.general.ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
  loop:
    - "80"
    - "443"
  when: not (all_domains_proxied_through_cloudflare | default(false))

- name: Create data directory
  file:
    path: "{{ ansible_env.HOME }}/services/profile_aggregator/data"
    state: directory
    mode: '0755'

- name: ensure docker is running
  become: true
  ansible.builtin.systemd:
    name: docker
    state: started

- name: Start up docker services
  ansible.builtin.shell: "docker compose down && docker compose up -d"
  args:
    chdir: "{{ ansible_env.HOME }}/services/profile_aggregator"
  register: service_started
  retries: 5
  until: service_started is success

- name: Setup the image updater
  ansible.builtin.include_role:
    name: image-update-service
  vars:
    service_name: profile_aggregator
    service_image: "{{ profile_aggregator_image }}"
    service_image_tag: "{{ profile_aggregator_image_tag }}"
    frequency: 3m
    working_dir: "{{ ansible_env.HOME }}/services/profile_aggregator"

- name: Setup the health check
  ansible.builtin.include_role:
    name: health-check
  vars:
    health_endpoint: "{{ profile_aggregator_health_endpoint }}"

