# Setup nos-crossposting-service on server
---
- name: UFW - Allow http/https connections
  become: true
  community.general.ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
  loop:
    - "80"
    - "443"


- name: Ensure events dir exists
  ansible.builtin.file:
    path: "{{ homedir }}/services/events"
    state: directory
    mode: '0755'


- name: Copy docker-compose.yml to events dir
  ansible.builtin.template:
    src: docker-compose.yml.tpl
    dest: "{{ homedir }}/services/events/docker-compose.yml"
    mode: 0644


- name: Copy env file to events dir
  ansible.builtin.template:
    src: env.tpl
    dest: "{{ homedir }}/services/events/.env"
    mode: 0644


- name: Ensure events/certs dir exists
  ansible.builtin.file:
    path: "{{ homedir }}/services/events/certs"
    state: directory
    mode: '0755'


- name: Copy pubsub cert to events dir
  ansible.builtin.copy:
    src: "{{ events_google_pubsub_credentials_json_path }}"
    dest: "{{ homedir }}/services/events/certs/{{ events_google_pubsub_credentials_json }}"
    mode: 0644


- name: ensure docker is running
  ansible.builtin.service:
    name: docker
    state: started


- name: Start up events service
  ansible.builtin.shell: "docker compose down && docker network prune -f && docker compose up -d"
  args:
    chdir: "{{ homedir }}/services/events"
  register: service_started
  retries: 5
  until: service_started is success


- name: Copy systemd service files for image update
  become: true
  ansible.builtin.template:
    src: "{{ file.src }}"
    dest: "{{ file.dest }}"
    mode: "{{ file.mode }}"
  loop:
    - src: event-image-update.service.tpl
      dest: "/etc/systemd/system/event-image-update.service"
      mode: "0644"
    - src: event-image-update.sh.tpl
      dest: "/usr/local/bin/event-image-update.sh"
      mode: "0755"
    - src: event-image-update.timer.tpl
      dest: "/etc/systemd/system/event-image-update.timer"
      mode: "0644"
  loop_control:
    loop_var: file


- name: Enable image update service and timer
  become: true
  ansible.builtin.systemd:
    name: "{{ item }}"
    enabled: true
  loop:
    - event-image-update.service
    - event-image-update.timer


- name: Start image update service
  become: true
  ansible.builtin.systemd:
    name: event-image-update
    state: started
    daemon_reload: true