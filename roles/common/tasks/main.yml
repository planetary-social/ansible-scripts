# This are leftovers from an old method of installing the Digital Ocean metrics agent, and they are causing
# problems now.
- name: Delete old Digital Ocean Metrics agent files 
  become: true
  ansible.builtin.file:
    path: '{{ item }}'
    state: absent
  with_items:
     - /usr/share/keyrings/digitalocean-agent-keyring.gpg
     - /etc/apt/sources.list.d/droplet-agent.list.save
     - /etc/apt/sources.list.d/droplet-agent.list
     - /etc/apt/sources.list.d/digitalocean-agent.list
     - /etc/apt/sources.list.d/repos_insights_digitalocean_com_apt_do_agent.list


- name: Perform a dist-upgrade.
  become: true
  ansible.builtin.apt:
    upgrade: dist
    update_cache: yes
    cache_valid_time: 3600


- name: update cache
  become: true
  ansible.builtin.apt:


- name: Remove dependencies that are no longer required.
  become: true
  ansible.builtin.apt:
    autoremove: yes
  register: dependencies_removed
  retries: 10
  delay: 5
  until: dependencies_removed is success


- name: Disable snapd service if enabled
  become: true
  shell: if systemctl is-enabled --quiet snapd; then systemctl disable snapd && echo disable_ok ; fi
  register: output
  changed_when: "'disable_ok' in output.stdout"


- name: "Uninstall Snapd"
  become: true
  ansible.builtin.apt:
    pkg: snapd
    state: absent
  register: snapd_removed
  retries: 10
  delay: 5
  until: snapd_removed is success


- name: "Remove Snapd directory"
  become: true
  ansible.builtin.file:
    path: /root/snap
    state: absent


- name: Install common packages
  become: true
  ansible.builtin.apt:
    pkg:
      - curl
      - vim
      - git
      - ufw
      - rsync
      - jq
      - tmux
      - mosh
      - gnupg
    state: latest
  register: pkgs_added
  retries: 10
  delay: 5
  until: pkgs_added is success


- name: UFW - Allow SSH connections
  become: true
  community.general.ufw:
    rule: allow
    name: OpenSSH


- name: UFW - Enable and deny by default
  become: true
  community.general.ufw:
    state: enabled
    default: deny


- name: Check if a reboot is required.
  become: true
  ansible.builtin.stat:
    path: /var/run/reboot-required
    get_checksum: false
  register: reboot_required_file


- name: Reboot the server (if required).
  become: true
  ansible.builtin.reboot:
  when: reboot_required_file.stat.exists == true