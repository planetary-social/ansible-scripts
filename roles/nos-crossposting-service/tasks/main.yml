# Setup nos-crossposting-service on server
---
- name: Copy nginx config to sites available
  become: true
  ansible.builtin.template:
    src: nginx.conf.tpl
    dest: /etc/nginx/sites-available/{{ domain }}
    mode: 0644
    force: yes


- name: Symlink site config to sites-enabled
  become: true
  ansible.builtin.file:
    src: "/etc/nginx/sites-available/{{ domain }}"
    dest: "/etc/nginx/sites-enabled/{{ domain }}"
    state: link


- name: Remove default config from sites-enabled
  become: true
  ansible.builtin.file:
    path: /etc/nginx/sites-enabled/default
    state: absent

- name: Check if redirect configs exist on server
  become: true
  ansible.builtin.stat:
    path: "/etc/nginx/sites-available/{{ redirect }}"
  loop: "{{ redirects }}"
  register: existing_redirects
  loop_control:
    loop_var: redirect
  when: redirects is defined
  ignore_errors: true

- name: Archive existing redirect configs
  become: true
  ansible.builtin.command: mv /etc/nginx/sites-available/{{ redirect }} /etc/nginx/sites-available/{{ redirect }}.bk
  args:
    removes: /etc/nginx/sites-available/{{ redirect }}
    creates: /etc/nginx/sites-available/{{ redirect }}.bk
  loop: "{{ existing_redirects.results }}"
  loop_control:
    loop_var: redirect
  when:
    - redirects is defined
    - redirect.stat.exists


- name: Remove redirect configs from sites-enabled
  become: true
  ansible.builtin.file:
    path: /etc/nginx/sites-enabled/{{ redirect }}
    state: absent
  loop: "{{ existing_redirects.results }}"
  loop_control:
    loop_var: redirect
  when:
    - redirects is defined
    - redirect.stat.exists


- name: UFW - Allow http/https connections
  become: true
  community.general.ufw:
    rule: allow
    name: "Nginx Full"


- name: UFW - Allow tcp connections for websockets
  become: true
  community.general.ufw:
    rule: allow
    port: 80
    proto: tcp


- name: Ensure config is valid
  become: true
  ansible.builtin.command: nginx -t
  changed_when: false


- name: Restart nginx
  become: true
  ansible.builtin.service:
    name: nginx
    state: restarted

- name: Set crossposting dir
  ansible.builtin.set_fact:
    crossposting_dir: "{{ homedir }}/crossposting"


- name: Ensure crossposting dir exists
  ansible.builtin.file:
    path: "{{ crossposting_dir }}"
    state: directory
    mode: '0755'


- name: Copy necessary template files to events dir
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ crossposting_dir }}/{{ item.dest }}"
    mode: 0644
  loop:
    - src: docker-compose.yml.tpl
      dest: docker-compose.yml
    - src: env.tpl
      dest: .env


- name: ensure docker is running
  ansible.builtin.service:
    name: docker
    state: started


- name: Start up crossposting service
  ansible.builtin.shell: "docker compose down && docker compose up -d"
  args:
    chdir: "{{ homedir }}/crossposting"
  register: service_started
  retries: 5
  until: service_started is success


- name: Setup the image updater
  ansible.builtin.include_role:
    name: image-update-service
  vars:
    service_name: crossposting
    service_image: "{{crossposting_image }}"
    service_image_tag: "{{ crossposting_image_tag }}"
    frequency: 3m
    working_dir: "{{ crossposting_dir }}"


- name: Setup the health check
  ansible.builtin.include_role:
    name: health-check
  vars:
    health_check_endpoint: "{{ crossposting_health_endpoint }}"