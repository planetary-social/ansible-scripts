---
- name: Set rss dir
  ansible.builtin.set_fact:
    rss_dir: "{{ homedir }}/rsslay"


- name: Ensure rsslay dir exists
  ansible.builtin.file:
    path: "{{ rss_dir }}"
    state: directory
    mode: '0755'


- name: Copy docker-compose.yml to rsslay dir
  ansible.builtin.template:
    src: docker-compose.yml.tpl
    dest: "{{ rss_dir }}/docker-compose.yml"
    mode: 0644


- name: ensure docker is running
  ansible.builtin.service:
    name: docker
    state: started


- name: Start up rsslay
  ansible.builtin.shell: "docker compose down && docker compose up -d"
  args:
    chdir: "{{ rss_dir }}"
  register: service_started
  retries: 5
  until: service_started is success


- name: Set nginx config for all services
  become: true
  ansible.builtin.template:
    src: nginx.conf.tpl
    dest: /etc/nginx/sites-available/{{ domain }}
    mode: 0644


- name: Symlink site config to sites-enabled
  become: true
  ansible.builtin.file:
    src: "/etc/nginx/sites-available/{{ domain }}"
    dest: "/etc/nginx/sites-enabled/{{ domain }}"
    state: link


- name: UFW - Allow http/https connections
  become: true
  community.general.ufw:
    rule: allow
    name: "Nginx Full"


- name: UFW - Allow tcp connections for websockets
  become: true
  community.general.ufw:
    rule: allow
    port: 80
    proto: tcp


- name: Ensure config is valid
  become: true
  ansible.builtin.command: nginx -t
  changed_when: false


- name: Restart nginx
  become: true
  ansible.builtin.service:
    name: nginx
    state: restarted


- name: Setup the image updater
  ansible.builtin.include_role:
    name: image-update-service
  vars:
    service_name: rsslay
    service_image: "{{ rss_image }}"
    service_image_tag: "{{ rss_image_tag }}"
    frequency: 3m
    working_dir: "{{ rss_dir }}"


- name: Setup the health check
  ansible.builtin.include_role:
    name: health-check
  vars:
    health_check_endpoint: "{{ rss_health_endpoint }}"